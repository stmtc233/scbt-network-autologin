name: Manual Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions: # 添加此部分来授予 GITHUB_TOKEN 创建 Release 的权限
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go (根据你的项目语言调整)
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      # --- Windows x64 Build ---
      - name: Build for Windows x64
        run: |
          GOOS=windows GOARCH=amd64 go build -o myapp-windows-amd64.exe .
      - name: Package Windows artifact
        run: |
          mkdir -p release/myapp-windows-amd64
          cp myapp-windows-amd64.exe release/myapp-windows-amd64/
          cp .env release/myapp-windows-amd64/
          zip -r myapp-windows-amd64.zip release/myapp-windows-amd64

      # --- Linux x64 Build ---
      - name: Build for Linux x64
        run: |
          GOOS=linux GOARCH=amd64 go build -o myapp-linux-amd64 .
      - name: Package Linux x64 artifact
        run: |
          mkdir -p release/myapp-linux-amd64
          cp myapp-linux-amd64 release/myapp-linux-amd64/
          cp .env release/myapp-linux-amd64/
          tar -czvf myapp-linux-amd64.tar.gz -C release/myapp-linux-amd64 .

      # --- Linux arm64 Build ---
      - name: Build for Linux arm64
        run: |
          GOOS=linux GOARCH=arm64 go build -o myapp-linux-arm64 .
      - name: Package Linux arm64 artifact
        run: |
          mkdir -p release/myapp-linux-arm64
          cp myapp-linux-arm64 release/myapp-linux-arm64/
          cp .env release/myapp-linux-arm64/
          tar -czvf myapp-linux-arm64.tar.gz -C release/myapp-linux-arm64 .

      # --- Create Release and Upload Artifacts ---
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          draft: false
          prerelease: false

      - name: Upload Windows Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./myapp-windows-amd64.zip
          asset_name: myapp-windows-amd64.zip
          asset_content_type: application/zip

      - name: Upload Linux x64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./myapp-linux-amd64.tar.gz
          asset_name: myapp-linux-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Linux arm64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./myapp-linux-arm64.tar.gz
          asset_name: myapp-linux-arm64.tar.gz
          asset_content_type: application/gzip
